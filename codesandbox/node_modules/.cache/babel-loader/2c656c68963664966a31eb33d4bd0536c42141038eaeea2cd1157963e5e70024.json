{"ast":null,"code":"var _jsxFileName = \"/Users/jenniferzhuang/Forge/react-tictactoe/codesandbox/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n/* Child component */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: [\" \", value, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 11\n  }, this);\n}\n\n/* ex-Parent top-level component */\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  /* immutability: replace the data with a new copy which has the desired changes */\n  function handleClick() {\n    /* a base case to prevent overwriting a square by checking if it already has input OR has won*/\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n\n    // setSquares(nextSquares);\n    // /* flip the value so that the next player can go */\n    // setXIsNext(!IsNext);\n  }\n\n  /* current top level component: display text to show who is winner */\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = Board;\nfunction calculateWinner(squares) {\n  /* all of the possible sequences to determine a winner */\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    /* see if the sequence that we currently have matches with any sequence in possible list */\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n/* display a list that contains a history of past moves */\nexport default function Game() {\n  _s();\n  /* Add some state to the Game component to track which player is next and the history of moves */\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n\n  /* keep track of which step the user is currently viewing */\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n\n  // const currentSquares = history[history.length - 1];\n\n  /* render the currently selected move, instead of always rendering the final move */\n  const currentSquares = history[currentMove];\n  function handlePlay(nextSquares) {\n    // TODO: implementing handleClick functionality like we used to, but this time taking account of the moves that were taken. update currentMove to point to the latest history entry.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  /* transform history of moves into React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves */\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    /* specify specific moves as a key since we are working with dynamic lists */\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","lines","length","a","b","c","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","jumpTo","nextMove","moves","map","move","description","_c3","$RefreshReg$"],"sources":["/Users/jenniferzhuang/Forge/react-tictactoe/codesandbox/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\n\n/* Child component */\nfunction Square({ value, onSquareClick }) {\n  return (<button className=\"square\" onClick={onSquareClick}> {value} </button>);\n\n}\n\n/* ex-Parent top-level component */\nfunction Board({ xIsNext, squares, onPlay }) {\n\n  /* immutability: replace the data with a new copy which has the desired changes */\n  function handleClick() {\n\n    /* a base case to prevent overwriting a square by checking if it already has input OR has won*/\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n\n    const nextSquares = squares.slice();\n\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n\n    // setSquares(nextSquares);\n    // /* flip the value so that the next player can go */\n    // setXIsNext(!IsNext);\n\n  }\n\n  /* current top level component: display text to show who is winner */\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n      </div>\n    </>\n  );\n}\n\nfunction calculateWinner(squares) {\n\n  /* all of the possible sequences to determine a winner */\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    /* see if the sequence that we currently have matches with any sequence in possible list */\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n/* display a list that contains a history of past moves */\nexport default function Game() {\n\n  /* Add some state to the Game component to track which player is next and the history of moves */\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n\n  /* keep track of which step the user is currently viewing */\n  const [currentMove, setCurrentMove] = useState(0);\n\n  const xIsNext = currentMove % 2 === 0;\n\n  // const currentSquares = history[history.length - 1];\n\n  /* render the currently selected move, instead of always rendering the final move */\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    // TODO: implementing handleClick functionality like we used to, but this time taking account of the moves that were taken. update currentMove to point to the latest history entry.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  /* transform history of moves into React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves */\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    /* specify specific moves as a key since we are working with dynamic lists */\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}